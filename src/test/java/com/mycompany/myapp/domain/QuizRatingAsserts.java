package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class QuizRatingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizRatingAllPropertiesEquals(QuizRating expected, QuizRating actual) {
        assertQuizRatingAutoGeneratedPropertiesEquals(expected, actual);
        assertQuizRatingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizRatingAllUpdatablePropertiesEquals(QuizRating expected, QuizRating actual) {
        assertQuizRatingUpdatableFieldsEquals(expected, actual);
        assertQuizRatingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizRatingAutoGeneratedPropertiesEquals(QuizRating expected, QuizRating actual) {
        assertThat(expected)
            .as("Verify QuizRating auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizRatingUpdatableFieldsEquals(QuizRating expected, QuizRating actual) {
        assertThat(expected)
            .as("Verify QuizRating relevant properties")
            .satisfies(e -> assertThat(e.getRating()).as("check rating").isEqualTo(actual.getRating()))
            .satisfies(e -> assertThat(e.getComment()).as("check comment").isEqualTo(actual.getComment()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizRatingUpdatableRelationshipsEquals(QuizRating expected, QuizRating actual) {
        assertThat(expected)
            .as("Verify QuizRating relationships")
            .satisfies(e -> assertThat(e.getQuiz()).as("check quiz").isEqualTo(actual.getQuiz()))
            .satisfies(e -> assertThat(e.getUser()).as("check user").isEqualTo(actual.getUser()));
    }
}
