package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class GameSessionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGameSessionAllPropertiesEquals(GameSession expected, GameSession actual) {
        assertGameSessionAutoGeneratedPropertiesEquals(expected, actual);
        assertGameSessionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGameSessionAllUpdatablePropertiesEquals(GameSession expected, GameSession actual) {
        assertGameSessionUpdatableFieldsEquals(expected, actual);
        assertGameSessionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGameSessionAutoGeneratedPropertiesEquals(GameSession expected, GameSession actual) {
        assertThat(expected)
            .as("Verify GameSession auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGameSessionUpdatableFieldsEquals(GameSession expected, GameSession actual) {
        assertThat(expected)
            .as("Verify GameSession relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getStartTime())
                        .as("check startTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getStartTime())
            )
            .satisfies(
                e -> assertThat(e.getEndTime()).as("check endTime").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getEndTime())
            )
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(
                e -> assertThat(e.getCurrentQuestionIndex()).as("check currentQuestionIndex").isEqualTo(actual.getCurrentQuestionIndex())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGameSessionUpdatableRelationshipsEquals(GameSession expected, GameSession actual) {}
}
